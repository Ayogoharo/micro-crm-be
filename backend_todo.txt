# Backend TODO - Micro CRM for Local Services

## Sprint 1: Foundation + Auth + Clients

### Phase 1: Project Setup & Infrastructure

- [x] **Task 1.1** - Initialize NestJS project with TypeScript
  - Create new NestJS project with CLI
  - Configure tsconfig.json for strict mode
  
- [x] **Task 1.2** - Setup environment configuration
  - Create .env file structure
  - Install @nestjs/config
  - Setup ConfigModule with validation schema
  
- [x] **Task 1.3** - Configure Docker Compose
  - Create docker-compose.yml with Postgres service
  - Define database credentials and ports
  - Add volume mounting for data persistence
  
- [ ] **Task 1.4** - Setup TypeORM
  - Install TypeORM and pg driver
  - Configure TypeOrmModule in app.module
  - Setup migration configuration in data-source.ts
  - Create initial migration script
  
- [ ] **Task 1.5** - Configure code quality tools
  - Setup ESLint with recommended NestJS rules
  - Configure Prettier with project standards
  - Install and configure Husky for git hooks
  - Add pre-commit hook for linting and formatting
  
- [ ] **Task 1.6** - Create comprehensive README
  - Document local development setup steps
  - Add environment variables documentation
  - Include Docker commands and migration instructions

---

### Phase 2: Authentication System

- [ ] **Task 2.1** - Create User entity
  - Define User entity with TypeORM decorators
  - Add fields: id, email, passwordHash, provider, plan, createdAt, updatedAt
  - Add enum for authentication providers (LOCAL, GOOGLE)
  - Add enum for subscription plans (FREE, PRO)
  
- [ ] **Task 2.2** - Generate and run User migration
  - Create migration for users table
  - Add unique constraints on email
  - Run migration against database
  
- [ ] **Task 2.3** - Create Auth module structure
  - Generate auth module, controller, and service
  - Setup DTOs for registration and login
  - Add class-validator decorators for input validation
  
- [ ] **Task 2.4** - Implement password hashing
  - Install bcrypt library
  - Create utility functions for hash and compare
  - Integrate into user creation flow
  
- [ ] **Task 2.5** - Setup JWT strategy
  - Install @nestjs/jwt and @nestjs/passport
  - Configure JwtModule with secret and expiration
  - Create JWT strategy for token validation
  - Create JWT payload interface
  
- [ ] **Task 2.6** - Implement registration endpoint
  - Create POST /auth/register endpoint
  - Validate email uniqueness
  - Hash password before saving
  - Return user data (excluding password)
  
- [ ] **Task 2.7** - Implement login endpoint
  - Create POST /auth/login endpoint
  - Validate credentials
  - Generate and return JWT token
  - Include user plan in response
  
- [ ] **Task 2.8** - Create authentication guard
  - Implement JwtAuthGuard using Passport
  - Add decorator for extracting current user from request
  - Test guard on protected endpoints
  
- [ ] **Task 2.9** - Add error handling
  - Create custom exception filters
  - Handle duplicate email errors
  - Handle invalid credentials errors
  - Return standardized error responses

---

### Phase 3: Clients Module

- [ ] **Task 3.1** - Create Client entity
  - Define Client entity with TypeORM decorators
  - Add fields: id, name, email, phone, notes, createdAt, updatedAt
  - Add ManyToOne relation to User entity
  - Add foreign key constraint for userId
  
- [ ] **Task 3.2** - Generate and run Client migration
  - Create migration for clients table
  - Add index on userId for query performance
  - Run migration against database
  
- [ ] **Task 3.3** - Create Clients module structure
  - Generate clients module, controller, and service
  - Setup DTOs for create and update operations
  - Add validation rules with class-validator
  
- [ ] **Task 3.4** - Implement create client endpoint
  - Create POST /clients endpoint
  - Secure with JWT guard
  - Associate client with authenticated user
  - Return created client data
  
- [ ] **Task 3.5** - Implement list clients endpoint
  - Create GET /clients endpoint with pagination
  - Add query parameters for page and limit
  - Filter clients by authenticated user
  - Return paginated results with metadata
  
- [ ] **Task 3.6** - Implement get single client endpoint
  - Create GET /clients/:id endpoint
  - Validate client belongs to authenticated user
  - Return 404 if not found or unauthorized
  
- [ ] **Task 3.7** - Implement update client endpoint
  - Create PATCH /clients/:id endpoint
  - Validate ownership before update
  - Support partial updates
  - Return updated client data
  
- [ ] **Task 3.8** - Implement delete client endpoint
  - Create DELETE /clients/:id endpoint
  - Validate ownership before deletion
  - Implement soft delete or hard delete
  - Return success confirmation
  
- [ ] **Task 3.9** - Add search functionality
  - Add search query parameter to list endpoint
  - Implement search by name, email, or phone
  - Use ILIKE for case-insensitive search
  
- [ ] **Task 3.10** - Add input validation
  - Validate email format
  - Validate phone number format
  - Add length constraints on text fields
  - Return clear validation error messages

---

### Phase 4: API Documentation & Testing

- [ ] **Task 4.1** - Setup Swagger documentation
  - Install @nestjs/swagger
  - Configure SwaggerModule in main.ts
  - Set API title, description, and version
  
- [ ] **Task 4.2** - Document Auth endpoints
  - Add @ApiTags decorator to auth controller
  - Add @ApiOperation and @ApiResponse decorators
  - Document request/response schemas
  - Add authentication examples
  
- [ ] **Task 4.3** - Document Clients endpoints
  - Add @ApiTags decorator to clients controller
  - Document all CRUD operations
  - Add @ApiBearerAuth for protected endpoints
  - Include pagination examples
  
- [ ] **Task 4.4** - Add DTO documentation
  - Use @ApiProperty decorators on DTOs
  - Add description and examples for each field
  - Document validation rules
  
- [ ] **Task 4.5** - Create manual testing checklist
  - Test registration with valid/invalid data
  - Test login with correct/incorrect credentials
  - Test all client CRUD operations
  - Test authorization (accessing other user's clients)
  - Test pagination and search functionality

---

### Phase 5: Deployment Preparation

- [ ] **Task 5.1** - Add health check endpoint
  - Create GET /health endpoint
  - Check database connection status
  - Return service version and status
  
- [ ] **Task 5.2** - Configure CORS
  - Setup CORS middleware in main.ts
  - Configure allowed origins from environment
  - Set credentials support for cookies
  
- [ ] **Task 5.3** - Add request logging
  - Install and configure logging library
  - Log incoming requests with timestamps
  - Log errors with stack traces
  
- [ ] **Task 5.4** - Prepare for Railway/Render deployment
  - Create Procfile or start script
  - Document required environment variables
  - Test build process locally
  - Ensure migrations run on deployment

---

## Future Sprints (Not in Current Scope)

### Sprint 2: Appointments Module
- [ ] Create Appointment entity with relation to Client
- [ ] Implement CRUD endpoints for appointments
- [ ] Add status management (scheduled, completed, cancelled)
- [ ] Add date/time validation and conflict checking

### Sprint 3: Reminders System
- [ ] Setup email service integration (Postmark/Resend)
- [ ] Create reminder scheduler with cron jobs
- [ ] Implement email templates
- [ ] Add reminder preferences per user

### Sprint 4: Invoices Module
- [ ] Create Invoice entity with relation to Client
- [ ] Implement invoice generation endpoints
- [ ] Integrate PDF generation library
- [ ] Add invoice numbering system

### Sprint 5: Monetization
- [ ] Integrate Stripe/Paddle for subscriptions
- [ ] Add webhook handlers for payment events
- [ ] Implement plan upgrade/downgrade logic
- [ ] Add usage tracking for free tier limits